name: Release

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

jobs:
  verify-version:
    name: Verify that version and changelog are updated
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify versions match
        run: |
          export CRATE_VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
          export TAG_VERSION=$(echo $GITHUB_REF | cut -dv -f2)
          if [ "$CRATE_VERSION" != "$TAG_VERSION" ]; then
            echo "::error ::Did you forget to update version in Cargo.toml?"
            exit 1
          fi
        shell: bash

      - name: Verify changelog entry
        run: |
          export CRATE_VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
          grep -E "^## v$CRATE_VERSION - [[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}$" CHANGELOG.md

  build-and-test:
    name: Build crate and run tests
    runs-on: ubuntu-18.04
    needs: verify-version

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build (release)
        run: cargo build --release --locked

      - name: Run tests (release)
        run: cargo test --release

  install-cargo-deb:
    name: Build and install cargo deb
    runs-on: ubuntu-18.04
    needs: verify-version

    steps:
      - name: Install cargo deb
        run: cargo install cargo-deb --root=./

      - name: Create cargo-deb artifact
        uses: actions/upload-artifact@v3
        with:
          name: cargo-deb
          path: bin/cargo-deb

  create-amd64-deb-package:
    name: Create amd64 debian package
    runs-on: ubuntu-18.04
    needs: install-cargo-deb

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set version environment variable
        run: |
          echo "version=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)" >> $GITHUB_ENV

      - name: Download cargo-deb artifact
        uses: actions/download-artifact@v3
        with:
          name: cargo-deb

      - run: chmod +x cargo-deb/cargo-deb

      - name: Update apt package repositories
        run: sudo apt-get update

      - name: Build amd64 deb package
        run: |
          cargo-deb/cargo-deb --target=x86_64-unknown-linux-gnu

      - name: Create amd64 deb package artifact
        uses: actions/upload-artifact@v3
        with:
          name: debian_amd64
          path: target/x86_64-unknown-linux-gnu/debian/uption_${{ env.version }}_amd64.deb

  create-arm64-deb-package:
    name: Create arm64 debian packages
    runs-on: ubuntu-18.04
    needs: install-cargo-deb

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set version environment variable
        run: |
          echo "version=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)" >> $GITHUB_ENV

      - name: Download cargo-deb artifact
        uses: actions/download-artifact@v3
        with:
          name: cargo-deb

      - run: chmod +x cargo-deb/cargo-deb

      - name: Update apt package repositories
        run: sudo apt-get update

      - name: Install aarch64 cross toolchain
        run: sudo apt-get -y install gcc-aarch64-linux-gnu

      - name: Install aarch64 cross compiled standard crates
        run: rustup target add aarch64-unknown-linux-gnu

      - name: Configure cargo for cross compilation
        run: |
          mkdir -p ~/.cargo
          cat >>~/.cargo/config <<EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          EOF

      - name: Build arm64 deb package
        run: |
          cargo-deb/cargo-deb --target=aarch64-unknown-linux-gnu

      - name: Create arm64 deb package artifact
        uses: actions/upload-artifact@v3
        with:
          name: debian_arm64
          path: target/aarch64-unknown-linux-gnu/debian/uption_${{ env.version }}_arm64.deb

  create-arm32-deb-package:
    name: Create arm32 debian package
    runs-on: ubuntu-18.04
    needs: install-cargo-deb

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set version environment variable
        run: |
          echo "version=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)" >> $GITHUB_ENV

      - name: Download cargo-deb artifact
        uses: actions/download-artifact@v3
        with:
          name: cargo-deb

      - run: chmod +x cargo-deb/cargo-deb

      - name: Update apt package repositories
        run: sudo apt-get update

      - name: Install armv7 cross toolchain
        run: sudo apt-get -y install gcc-arm-linux-gnueabihf

      - name: Install armv7 cross compiled standard crates
        run: rustup target add armv7-unknown-linux-gnueabihf

      - name: Configure cargo for cross compilation
        run: |
          mkdir -p ~/.cargo
          cat >>~/.cargo/config <<EOF
          [target.armv7-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          EOF

      - name: Build arm32 deb package
        run: |
          cargo-deb/cargo-deb --target=armv7-unknown-linux-gnueabihf

      - name: Create arm32 deb package artifact
        uses: actions/upload-artifact@v3
        with:
          name: debian_arm32
          path: target/armv7-unknown-linux-gnueabihf/debian/uption_${{ env.version }}_armhf.deb

  create-release:
    name: Create release
    runs-on: ubuntu-latest
    needs:
      - build-and-test
      - create-amd64-deb-package
      - create-arm64-deb-package
      - create-arm32-deb-package

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set version and changelog environment variables
        id: variables
        run: |
          export CRATE_VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
          echo "version=$CRATE_VERSION" >> $GITHUB_ENV

          export MAJOR=$(echo $CRATE_VERSION | cut -d'.' -f1)
          export MINOR=$(echo $CRATE_VERSION | cut -d'.' -f2)
          export PATCH=$(echo $CRATE_VERSION | cut -d'.' -f3)
          export CHANGELOG=$(awk -v pat="## v$MAJOR\.$MINOR\.$PATCH - " '($0 ~ pat){flag=1; next} /## v[0-9]\.[0-9]\.[0-9] - /{flag=0} flag' CHANGELOG.md)

          # Hack to support multiline variables in GA
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          echo "::set-output name=changelog::$CHANGELOG"

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Uption ${{ github.ref }}
          body: ${{ steps.variables.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Download amd64 deb package artifact
        uses: actions/download-artifact@v3v3
        with:
          name: debian_amd64

      - name: Upload amd64 deb package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: debian_amd64/uption_${{ env.version }}_amd64.deb
          asset_name: uption_${{ env.version }}_amd64.deb
          asset_content_type: vnd.debian.binary-package

      - name: Download arm64 deb package artifact
        uses: actions/download-artifact@v3
        with:
          name: debian_arm64

      - name: Upload arm64 deb package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: debian_arm64/uption_${{ env.version }}_arm64.deb
          asset_name: uption_${{ env.version }}_arm64.deb
          asset_content_type: vnd.debian.binary-package

      - name: Download arm32 deb package artifact
        uses: actions/download-artifact@v3
        with:
          name: debian_arm32

      - name: Upload arm32 deb package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: debian_arm32/uption_${{ env.version }}_armhf.deb
          asset_name: uption_${{ env.version }}_arm32.deb
          asset_content_type: vnd.debian.binary-package
