name: Build installation packages and create a Github release

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

jobs:
  verify-version:
    name: Verify that tagged version matches crate version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Verify versions match
        run: |
          export CRATE_VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
          export TAG_VERSION=$(echo $GITHUB_REF | cut -dv -f2)
          if [ "$CRATE_VERSION" != "$TAG_VERSION" ]; then
            echo "::error ::Did you forget to update version in Cargo.toml?"
            exit 1
          fi
        shell: bash

  build-and-test:
    name: Build crate and run tests
    runs-on: ubuntu-latest
    needs: verify-version

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Workaround for https://github.com/actions/cache/issues/133
      - name: Fix cargo caching
        run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/

      - name: Cache cargo registry (release)
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-release-

      - name: Cache cargo build (release)
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-release-

      - name: Build (release)
        run: cargo build --release

      - name: Run tests (release)
        run: cargo test --release

  create-deb-packages:
    name: Create debian packages
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Workaround for https://github.com/actions/cache/issues/133
      - name: Fix cargo caching
        run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/

      - name: Cache cargo registry (release)
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-release-

      - name: Cache cargo build (release)
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-release-

      - name: Set version environment variable
        run: |
          echo "::set-env name=version::$(cargo pkgid | cut -d# -f2 | cut -d: -f2)"

      - name: Install cargo deb
        run: cargo install cargo-deb

      - name: Update apt package repositories
        run: sudo apt-get update

      - name: Install aarch64 cross toolchain
        run: sudo apt-get -y install gcc-aarch64-linux-gnu

      - name: Install aarch64 cross compiled standard crates
        run: rustup target add aarch64-unknown-linux-gnu

      - name: Configure cargo for cross compilation
        run: |
          mkdir -p ~/.cargo
          cat >>~/.cargo/config <<EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          EOF

      - name: Build amd64 deb package
        run: |
          cargo deb --target=x86_64-unknown-linux-gnu

      - name: Create amd64 deb package artifact
        uses: actions/upload-artifact@v1
        with:
          name: debian_amd64
          path: target/x86_64-unknown-linux-gnu/debian/uption_${{ env.version }}_amd64.deb

      - name: Build arm64 deb package
        run: |
          cargo deb --target=aarch64-unknown-linux-gnu

      - name: Create arm64 deb package artifact
        uses: actions/upload-artifact@v1
        with:
          name: debian_arm64
          path: target/aarch64-unknown-linux-gnu/debian/uption_${{ env.version }}_arm64.deb

  create-release:
    name: Create release
    runs-on: ubuntu-latest
    needs: create-deb-packages

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set version environment variable
        run: |
          echo "::set-env name=version::$(cargo pkgid | cut -d# -f2 | cut -d: -f2)"

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Uption ${{ github.ref }}
          body: |
            Uption ${{ github.ref }}
          draft: false
          prerelease: true

      - name: Download amd64 deb package artifact
        uses: actions/download-artifact@v1
        with:
          name: debian_amd64

      - name: Upload amd64 deb package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: debian_amd64/uption_${{ env.version }}_amd64.deb
          asset_name: uption_${{ env.version }}_amd64.deb
          asset_content_type: vnd.debian.binary-package

      - name: Download arm64 deb package artifact
        uses: actions/download-artifact@v1
        with:
          name: debian_arm64

      - name: Upload arm64 deb package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: debian_arm64/uption_${{ env.version }}_arm64.deb
          asset_name: uption_${{ env.version }}_arm64.deb
          asset_content_type: vnd.debian.binary-package
